[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;
 
uniform float width = 1;
uniform vec4 outline_color : hint_color;
uniform bool active = true;
uniform bool full_sprite_highlight = false;
 
void fragment()
{  
	vec4 sprite_color = texture(TEXTURE, UV);
	
	if(active) {
		vec2 size = (vec2(width) * TEXTURE_PIXEL_SIZE);
		
		float alpha = sprite_color.a;
	    alpha += texture(TEXTURE, UV + vec2(0.0, -size.y)).a;
	    alpha += texture(TEXTURE, UV + vec2(size.x, -size.y)).a;
	    alpha += texture(TEXTURE, UV + vec2(size.x, 0.0)).a;
	    alpha += texture(TEXTURE, UV + vec2(size.x, size.y)).a;
	    alpha += texture(TEXTURE, UV + vec2(0.0, size.y)).a;
	    alpha += texture(TEXTURE, UV + vec2(-size.x, size.y)).a;
	    alpha += texture(TEXTURE, UV + vec2(-size.x, 0.0)).a;
	    alpha += texture(TEXTURE, UV + vec2(-size.x, -size.y)).a;
		
		vec3 final_color;
		
		if(full_sprite_highlight) {
			final_color = mix(outline_color.rgb, sprite_color.rgb, sprite_color.a * (float(full_sprite_highlight) / 2f));
		} else {
			final_color = mix(outline_color.rgb, sprite_color.rgb, sprite_color.a);
		}
		
	    COLOR = vec4(final_color, clamp(alpha, 0.0, 1.0));
	} else {
		COLOR = sprite_color
	}
    
}"
